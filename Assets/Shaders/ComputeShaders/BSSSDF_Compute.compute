// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

#define PI 3.141592653

float Gaussian(float v, float r)
{
    return 1.0 / sqrt(2 * PI * v) * exp(-(r*r) / (2 * v));
}

float3 Scatter(float r)
{
    return Gaussian(0.0064 * 1.414, r) * float3(0.233, 0.455, 0.649) +
    Gaussian(0.0484 * 1.414, r) * float3(0.1, 0.336, 0.344) +
    Gaussian(0.1870 * 1.414, r) * float3(0.118, 0.198, 0.0) +
    Gaussian(0.567 * 1.414, r) * float3(0.113, 0.007, 0.007) +
    Gaussian(1.99 * 1.414, r) * float3(0.358, 0.004, 0.000) +
    Gaussian(7.4100 * 1.414, r) * float3(0.078, 0.000, 0.000);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float x = (float)id.x / 2048.0;
    float y = (float)id.y / 2048.0;
    // x: ndotl y: 1 / r
    float theta = acos(x * 2.0 - 1.0);
    float skinRadius = 1.0 / clamp(y, 0.0001, 1.0);

    float3 m = 0.0;
    float3 c = 0.0;
    
    // [unroll(630)]
    for(float a = -PI; a <= PI; a += 0.0001)
    {
        float sampleAngle = theta + a;
        float diffuse = saturate(cos(sampleAngle));
        float sampleDist = abs(2 * skinRadius * sin(a * 0.5));
        float3 weights = Scatter(sampleDist);
        m += diffuse * weights * 0.0001;
        c += weights * 0.0001;
    }

    Result[id.xy] = float4(pow(m  / c, 1.0 / 2.2),  1.0);
}
